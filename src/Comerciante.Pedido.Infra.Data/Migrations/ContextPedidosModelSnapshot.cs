// <auto-generated />
using Comerciante.Pedido.Infra.Data.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using System;

namespace Comerciante.Pedido.Infra.Data.Migrations
{
    [DbContext(typeof(ContextPedidos))]
    partial class ContextPedidosModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.0-rtm-26452")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Comerciante.Pedido.Domain.Models.Colecao", b =>
                {
                    b.Property<Guid?>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("AtualizadoEm");

                    b.Property<string>("AtualizadoPor");

                    b.Property<DateTime?>("CriadoEm");

                    b.Property<string>("CriadoPor");

                    b.Property<bool?>("Deletado");

                    b.Property<DateTime?>("DeletadoEm");

                    b.Property<string>("DeletadoPor");

                    b.Property<string>("Descricao");

                    b.HasKey("Id");

                    b.ToTable("Colecoes");
                });

            modelBuilder.Entity("Comerciante.Pedido.Domain.Models.Conta", b =>
                {
                    b.Property<Guid?>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("AtualizadoEm");

                    b.Property<string>("AtualizadoPor");

                    b.Property<DateTime?>("CriadoEm");

                    b.Property<string>("CriadoPor");

                    b.Property<bool?>("Deletado");

                    b.Property<DateTime?>("DeletadoEm");

                    b.Property<string>("DeletadoPor");

                    b.Property<string>("Nome");

                    b.HasKey("Id");

                    b.ToTable("Contas");
                });

            modelBuilder.Entity("Comerciante.Pedido.Domain.Models.Cor", b =>
                {
                    b.Property<Guid?>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("AtualizadoEm");

                    b.Property<string>("AtualizadoPor");

                    b.Property<DateTime?>("CriadoEm");

                    b.Property<string>("CriadoPor");

                    b.Property<bool?>("Deletado");

                    b.Property<DateTime?>("DeletadoEm");

                    b.Property<string>("DeletadoPor");

                    b.Property<string>("Descricao");

                    b.HasKey("Id");

                    b.ToTable("Cores");
                });

            modelBuilder.Entity("Comerciante.Pedido.Domain.Models.Pedido", b =>
                {
                    b.Property<Guid?>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("AtualizadoEm");

                    b.Property<string>("AtualizadoPor");

                    b.Property<DateTime?>("CriadoEm");

                    b.Property<string>("CriadoPor");

                    b.Property<bool?>("Deletado");

                    b.Property<DateTime?>("DeletadoEm");

                    b.Property<string>("DeletadoPor");

                    b.Property<Guid>("Id_cliente");

                    b.Property<Guid>("Id_colecao");

                    b.Property<int>("Numero");

                    b.Property<double>("Total");

                    b.HasKey("Id");

                    b.HasIndex("Id_cliente");

                    b.HasIndex("Id_colecao");

                    b.ToTable("Pedidos");
                });

            modelBuilder.Entity("Comerciante.Pedido.Domain.Models.Pedido_Referencia", b =>
                {
                    b.Property<Guid?>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("AtualizadoEm");

                    b.Property<string>("AtualizadoPor");

                    b.Property<DateTime?>("CriadoEm");

                    b.Property<string>("CriadoPor");

                    b.Property<bool?>("Deletado");

                    b.Property<DateTime?>("DeletadoEm");

                    b.Property<string>("DeletadoPor");

                    b.Property<Guid>("Id_pedido");

                    b.Property<Guid>("Id_referencia");

                    b.Property<int>("Quantidade");

                    b.Property<double>("Total");

                    b.HasKey("Id");

                    b.HasIndex("Id_pedido");

                    b.HasIndex("Id_referencia");

                    b.ToTable("Pedido_Referencias");
                });

            modelBuilder.Entity("Comerciante.Pedido.Domain.Models.Pedido_Referencia_Tamanho", b =>
                {
                    b.Property<Guid?>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("AtualizadoEm");

                    b.Property<string>("AtualizadoPor");

                    b.Property<DateTime?>("CriadoEm");

                    b.Property<string>("CriadoPor");

                    b.Property<bool?>("Deletado");

                    b.Property<DateTime?>("DeletadoEm");

                    b.Property<string>("DeletadoPor");

                    b.Property<Guid>("Id_pedido_referencia");

                    b.Property<Guid>("Id_referencia_cor");

                    b.Property<Guid>("Id_referencia_tamanho");

                    b.Property<int>("Quantidade");

                    b.HasKey("Id");

                    b.HasIndex("Id_pedido_referencia");

                    b.HasIndex("Id_referencia_cor");

                    b.HasIndex("Id_referencia_tamanho");

                    b.ToTable("Pedido_Referencia_Tamanhos");
                });

            modelBuilder.Entity("Comerciante.Pedido.Domain.Models.Referencia", b =>
                {
                    b.Property<Guid?>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("AtualizadoEm");

                    b.Property<string>("AtualizadoPor");

                    b.Property<string>("Codigo");

                    b.Property<DateTime?>("CriadoEm");

                    b.Property<string>("CriadoPor");

                    b.Property<bool?>("Deletado");

                    b.Property<DateTime?>("DeletadoEm");

                    b.Property<string>("DeletadoPor");

                    b.Property<string>("Descricao");

                    b.Property<bool>("Grade");

                    b.Property<double>("Preco");

                    b.HasKey("Id");

                    b.ToTable("Referencias");
                });

            modelBuilder.Entity("Comerciante.Pedido.Domain.Models.Referencia_Colecao", b =>
                {
                    b.Property<Guid?>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("AtualizadoEm");

                    b.Property<string>("AtualizadoPor");

                    b.Property<DateTime?>("CriadoEm");

                    b.Property<string>("CriadoPor");

                    b.Property<bool?>("Deletado");

                    b.Property<DateTime?>("DeletadoEm");

                    b.Property<string>("DeletadoPor");

                    b.Property<Guid>("Id_colecao");

                    b.Property<Guid>("Id_referencia");

                    b.HasKey("Id");

                    b.HasIndex("Id_colecao");

                    b.HasIndex("Id_referencia");

                    b.ToTable("Referencia_Colecoes");
                });

            modelBuilder.Entity("Comerciante.Pedido.Domain.Models.Referencia_Cor", b =>
                {
                    b.Property<Guid?>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("AtualizadoEm");

                    b.Property<string>("AtualizadoPor");

                    b.Property<DateTime?>("CriadoEm");

                    b.Property<string>("CriadoPor");

                    b.Property<bool?>("Deletado");

                    b.Property<DateTime?>("DeletadoEm");

                    b.Property<string>("DeletadoPor");

                    b.Property<Guid>("Id_cor");

                    b.Property<Guid>("Id_referencia");

                    b.Property<double?>("Preco");

                    b.HasKey("Id");

                    b.HasIndex("Id_cor");

                    b.HasIndex("Id_referencia");

                    b.ToTable("Referencia_Cores");
                });

            modelBuilder.Entity("Comerciante.Pedido.Domain.Models.Referencia_Imagem", b =>
                {
                    b.Property<Guid?>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("AtualizadoEm");

                    b.Property<string>("AtualizadoPor");

                    b.Property<DateTime?>("CriadoEm");

                    b.Property<string>("CriadoPor");

                    b.Property<bool?>("Deletado");

                    b.Property<DateTime?>("DeletadoEm");

                    b.Property<string>("DeletadoPor");

                    b.Property<Guid>("Id_referencia");

                    b.Property<string>("Uri");

                    b.HasKey("Id");

                    b.HasIndex("Id_referencia");

                    b.ToTable("Referencia_Imagens");
                });

            modelBuilder.Entity("Comerciante.Pedido.Domain.Models.Referencia_Tamanho", b =>
                {
                    b.Property<Guid?>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("AtualizadoEm");

                    b.Property<string>("AtualizadoPor");

                    b.Property<DateTime?>("CriadoEm");

                    b.Property<string>("CriadoPor");

                    b.Property<bool?>("Deletado");

                    b.Property<DateTime?>("DeletadoEm");

                    b.Property<string>("DeletadoPor");

                    b.Property<Guid>("Id_referencia");

                    b.Property<Guid>("Id_tamanho");

                    b.Property<double?>("Total");

                    b.HasKey("Id");

                    b.HasIndex("Id_referencia");

                    b.HasIndex("Id_tamanho");

                    b.ToTable("Referencia_Tamanhos");
                });

            modelBuilder.Entity("Comerciante.Pedido.Domain.Models.Tamanho", b =>
                {
                    b.Property<Guid?>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("AtualizadoEm");

                    b.Property<string>("AtualizadoPor");

                    b.Property<DateTime?>("CriadoEm");

                    b.Property<string>("CriadoPor");

                    b.Property<bool?>("Deletado");

                    b.Property<DateTime?>("DeletadoEm");

                    b.Property<string>("DeletadoPor");

                    b.Property<string>("Descricao");

                    b.HasKey("Id");

                    b.ToTable("Tamanhos");
                });

            modelBuilder.Entity("Comerciante.Pedido.Domain.Models.Pedido", b =>
                {
                    b.HasOne("Comerciante.Pedido.Domain.Models.Conta", "Cliente")
                        .WithMany("Pedidos")
                        .HasForeignKey("Id_cliente")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Comerciante.Pedido.Domain.Models.Colecao", "Colecao")
                        .WithMany("Pedidos")
                        .HasForeignKey("Id_colecao")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Comerciante.Pedido.Domain.Models.Pedido_Referencia", b =>
                {
                    b.HasOne("Comerciante.Pedido.Domain.Models.Pedido", "Pedido")
                        .WithMany("Pedido_Referencias")
                        .HasForeignKey("Id_pedido")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Comerciante.Pedido.Domain.Models.Referencia", "Referencia")
                        .WithMany("Pedido_Referencias")
                        .HasForeignKey("Id_referencia")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Comerciante.Pedido.Domain.Models.Pedido_Referencia_Tamanho", b =>
                {
                    b.HasOne("Comerciante.Pedido.Domain.Models.Pedido_Referencia", "Pedido_Referencia")
                        .WithMany("Pedido_Referencia_Tamanhos")
                        .HasForeignKey("Id_pedido_referencia")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Comerciante.Pedido.Domain.Models.Referencia_Cor", "Referencia_Cor")
                        .WithMany("Pedido_Referencia_Tamanhos")
                        .HasForeignKey("Id_referencia_cor")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Comerciante.Pedido.Domain.Models.Referencia_Tamanho", "Referencia_Tamanho")
                        .WithMany("Pedido_Referencia_Tamanhos")
                        .HasForeignKey("Id_referencia_tamanho")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Comerciante.Pedido.Domain.Models.Referencia_Colecao", b =>
                {
                    b.HasOne("Comerciante.Pedido.Domain.Models.Colecao", "Colecao")
                        .WithMany("Referencia_Colecoes")
                        .HasForeignKey("Id_colecao")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Comerciante.Pedido.Domain.Models.Referencia", "Referencia")
                        .WithMany("Referencia_Colecoes")
                        .HasForeignKey("Id_referencia")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Comerciante.Pedido.Domain.Models.Referencia_Cor", b =>
                {
                    b.HasOne("Comerciante.Pedido.Domain.Models.Cor", "Cor")
                        .WithMany("Referencia_Cores")
                        .HasForeignKey("Id_cor")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Comerciante.Pedido.Domain.Models.Referencia", "Referencia")
                        .WithMany("Referencia_Cores")
                        .HasForeignKey("Id_referencia")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Comerciante.Pedido.Domain.Models.Referencia_Imagem", b =>
                {
                    b.HasOne("Comerciante.Pedido.Domain.Models.Referencia", "Referencia")
                        .WithMany("Referencia_Imagens")
                        .HasForeignKey("Id_referencia")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Comerciante.Pedido.Domain.Models.Referencia_Tamanho", b =>
                {
                    b.HasOne("Comerciante.Pedido.Domain.Models.Referencia", "Referencia")
                        .WithMany("Referencia_Tamanhos")
                        .HasForeignKey("Id_referencia")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Comerciante.Pedido.Domain.Models.Tamanho", "Tamanho")
                        .WithMany("Referencia_Tamanhos")
                        .HasForeignKey("Id_tamanho")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
